import { keyFile, sessionClient } from "../configs/dialogflow.js";
import Order from "../models/Order.js";
import Product from "../models/Product.js";

export const detectIntent = async (text, sessionId = 'sbum-session') => {
  const sessionPath = sessionClient.projectAgentSessionPath(
    keyFile.project_id,
    sessionId
  );

  const request = {
    session: sessionPath,
    queryInput: {
      text: {
        text,
        languageCode: 'vi',
      },
    },
  };

  const responses = await sessionClient.detectIntent(request);
  return responses[0].queryResult;
};


// X·ª≠ l√Ω webhook ch√≠nh t·ª´ Dialogflow
// export const handleWebhook = async (req, res) => {
//   try {
//     const intentName = req.body.queryResult.intent.displayName;
//     const parameters = req.body.queryResult.parameters;
    
//     console.log(`Received intent: ${intentName} with parameters:`, parameters);

//     switch (intentName) {
//       case 'get-product-info':
//         return await getProductInfo(parameters, res);
//       case 'check-order-status':
//         return await checkOrderStatus(parameters, res);
//       case 'get-menu-categories':
//         return await getMenuCategories(res);
//       case 'get-dishes-by-category':
//         return await getDishesByCategory(parameters, res);
//       default:
//         return res.json({
//           fulfillmentText: 'T√¥i kh√¥ng hi·ªÉu y√™u c·∫ßu c·ªßa b·∫°n. B·∫°n c√≥ th·ªÉ n√≥i r√µ h∆°n ƒë∆∞·ª£c kh√¥ng?'
//         });
//     }
//   } catch (error) {
//     console.error('Error in dialogflow webhook:', error);
//     return res.json({
//       fulfillmentText: 'ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n. Vui l√≤ng th·ª≠ l·∫°i sau.'
//     });
//   }
// };

// X·ª≠ l√Ω webhook ch√≠nh t·ª´ Dialogflow (c·∫£i ti·∫øn)
export const handleWebhook = async (req, res) => {
  try {
    // Ki·ªÉm tra request body
    if (!req.body || !req.body.queryResult) {
      return res.json({
        fulfillmentText: 'Y√™u c·∫ßu kh√¥ng h·ª£p l·ªá.'
      });
    }

    const intentName = req.body.queryResult.intent?.displayName;
    const parameters = req.body.queryResult.parameters || {};
    const queryText = req.body.queryResult.queryText;
    
    console.log(`Received intent: ${intentName} with parameters:`, parameters);
    console.log(`User query: ${queryText}`);

    // Ki·ªÉm tra intent c√≥ t·ªìn t·∫°i kh√¥ng
    if (!intentName) {
      return res.json({
        fulfillmentText: 'T√¥i kh√¥ng hi·ªÉu √Ω b·∫°n. B·∫°n c√≥ th·ªÉ h·ªèi v·ªÅ menu, m√≥n ƒÉn, ho·∫∑c ƒë∆°n h√†ng.'
      });
    }

    switch (intentName) {
      case 'get-product-info':
        return await getProductInfo(parameters, res);
      case 'check-order-status':
        return await checkOrderStatus(parameters, res);
      case 'get-menu-categories':
        return await getMenuCategories(res);
      case 'get-dishes-by-category':
        return await getDishesByCategory(parameters, res);
      case 'get-product-details':
        return await getProductDetails(parameters, res);
      case 'get-available-dishes':
        return await getAvailableDishes(parameters, res);
      case 'Default Welcome Intent':
        return res.json({
          fulfillmentText: 'Xin ch√†o! T√¥i c√≥ th·ªÉ gi√∫p b·∫°n:\nüçΩÔ∏è Xem menu v√† danh m·ª•c m√≥n ƒÉn\nüîç T√¨m ki·∫øm th√¥ng tin m√≥n ƒÉn\nüì¶ Ki·ªÉm tra tr·∫°ng th√°i ƒë∆°n h√†ng\n\nB·∫°n c·∫ßn g√¨ ·∫°?'
        });
      case 'Default Fallback Intent':
        return res.json({
          fulfillmentText: 'Xin l·ªói, t√¥i kh√¥ng hi·ªÉu y√™u c·∫ßu c·ªßa b·∫°n. B·∫°n c√≥ th·ªÉ:\n- H·ªèi "c√≥ nh·ªØng danh m·ª•c n√†o?"\n- H·ªèi "m√≥n g√¨ trong danh m·ª•c [t√™n danh m·ª•c]?"\n- H·ªèi "th√¥ng tin v·ªÅ m√≥n [t√™n m√≥n]"\n- H·ªèi "tr·∫°ng th√°i ƒë∆°n h√†ng [m√£ ƒë∆°n]"'
        });
      default:
        return res.json({
          fulfillmentText: `Intent "${intentName}" ch∆∞a ƒë∆∞·ª£c x·ª≠ l√Ω. Vui l√≤ng li√™n h·ªá qu·∫£n tr·ªã vi√™n.`
        });
    }
  } catch (error) {
    console.error('Error in dialogflow webhook:', error);
    return res.json({
      fulfillmentText: 'ƒê√£ x·∫£y ra l·ªói h·ªá th·ªëng. Vui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c li√™n h·ªá h·ªó tr·ª£.'
    });
  }
};

// L·∫•y danh s√°ch category t·ª´ Product
const getMenuCategories = async (res) => {
  try {
    // L·∫•y t·∫•t c·∫£ category t·ª´ Product, d√πng distinct ƒë·ªÉ l·∫•y danh s√°ch duy nh·∫•t
    const categories = await Product.distinct('category');

    if (!categories.length) {
      return res.json({
        fulfillmentText: 'Hi·ªán t·∫°i ch∆∞a c√≥ danh m·ª•c m√≥n ƒÉn n√†o.'
      });
    }

    // Tr·∫£ v·ªÅ danh s√°ch category d·∫°ng chu·ªói ph√¢n t√°ch b·∫±ng d·∫•u ph·∫©y
    return res.json({
      fulfillmentText: `Menu hi·ªán c√≥ c√°c danh m·ª•c: ${categories.join(', ')}. B·∫°n mu·ªën xem danh m·ª•c n√†o?`
    });
  } catch (error) {
    console.error('Error in getMenuCategories:', error);
    return res.json({
      fulfillmentText: 'ƒê√£ x·∫£y ra l·ªói khi truy v·∫•n danh m·ª•c m√≥n ƒÉn.'
    });
  }
};

const getDishesByCategory = async (parameters, res) => {
  try {
    const categoryRaw = parameters['category'];
    const categoryName = Array.isArray(categoryRaw) ? categoryRaw[0] : categoryRaw;

    if (!categoryName) {
      return res.json({
        fulfillmentText: 'B·∫°n c·∫ßn cung c·∫•p danh m·ª•c m√≥n ƒÉn.'
      });
    }

    const products = await Product.find({
      category: { $regex: categoryName, $options: 'i' }
    });

    if (!products.length) {
      const allCategories = await Product.distinct('category');
      return res.json({
        fulfillmentText: `Kh√¥ng t√¨m th·∫•y m√≥n ƒÉn thu·ªôc danh m·ª•c "${categoryName}". C√°c danh m·ª•c c√≥ s·∫µn: ${allCategories.join(', ')}.`
      });
    }

    const productList = products.map(p => `${p.name} - ${p.offerPrice || p.price}k`).join(';');

    return res.json({
      fulfillmentText: `C√°c m√≥n trong danh m·ª•c "${categoryName}":\n${productList}`
    });
  } catch (error) {
    console.error('L·ªói truy v·∫•n m√≥n ƒÉn:', error);
    return res.json({
      fulfillmentText: 'ƒê√£ x·∫£y ra l·ªói khi truy v·∫•n m√≥n ƒÉn.'
    });
  }
};


// Handler cho intent get-product-info
const getProductInfo = async (parameters, res) => {
  try {
    const productName = parameters.product;
    
    if (!productName) {
      return res.json({
        fulfillmentText: 'B·∫°n c·∫ßn cung c·∫•p t√™n s·∫£n ph·∫©m ƒë·ªÉ t√¥i c√≥ th·ªÉ t√¨m ki·∫øm.'
      });
    }
    
    // Truy v·∫•n s·∫£n ph·∫©m t·ª´ database
    const product = await Product.findOne({
      name: { $regex: productName, $options: 'i' }
    });
    
    if (!product) {
      return res.json({
        fulfillmentText: `Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ${productName} trong h·ªá th·ªëng.`
      });
    }
    
    return res.json({
      fulfillmentText: `S·∫£n ph·∫©m ${product.name} c√≥ gi√° ${product.price}ƒë v√† hi·ªán ${product.quantity > 0 ? 'c√≤n' : 'h·∫øt'} h√†ng.`
    });
  } catch (error) {
    console.error('Error in getProductInfo:', error);
    return res.json({
      fulfillmentText: 'ƒê√£ x·∫£y ra l·ªói khi t√¨m ki·∫øm th√¥ng tin s·∫£n ph·∫©m.'
    });
  }
};

// Handler cho intent check-order-status
const checkOrderStatus = async (parameters, res) => {
  try {
    const orderId = parameters.orderId;
    
    if (!orderId) {
      return res.json({
        fulfillmentText: 'B·∫°n c·∫ßn cung c·∫•p m√£ ƒë∆°n h√†ng ƒë·ªÉ t√¥i c√≥ th·ªÉ ki·ªÉm tra.'
      });
    }
    
    // Truy v·∫•n ƒë∆°n h√†ng t·ª´ database
    const order = await Order.findById(orderId);
    
    if (!order) {
      return res.json({
        fulfillmentText: `Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng c√≥ m√£ ${orderId}.`
      });
    }
    
    return res.json({
      fulfillmentText: `ƒê∆°n h√†ng ${orderId} hi·ªán ƒëang ·ªü tr·∫°ng th√°i: ${order.status}.`
    });
  } catch (error) {
    console.error('Error in checkOrderStatus:', error);
    return res.json({
      fulfillmentText: 'ƒê√£ x·∫£y ra l·ªói khi ki·ªÉm tra tr·∫°ng th√°i ƒë∆°n h√†ng.'
    });
  }
};

export const handleChatbotQuery = async (req, res) => {
  const { message, sessionId } = req.body;
  if (!message) return res.status(400).json({ error: 'Message is required' });

  try {
    const result = await detectIntent(message, sessionId);
    // Tr·∫£ v·ªÅ text tr·∫£ l·ªùi c·ªßa Dialogflow cho frontend
    return res.json({ reply: result.fulfillmentText });
  } catch (error) {
    console.error('Error in detectIntent:', error);
    return res.status(500).json({ error: 'L·ªói khi x·ª≠ l√Ω c√¢u h·ªèi' });
  }
};